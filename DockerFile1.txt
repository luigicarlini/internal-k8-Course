Creating Our First Dockerfile


In this exercise, you will create a Docker image that can print the arguments you 
pass to the Docker image, preceded by the text You are reading. For example, 
if you pass hello world, it will output You are reading hello world as 
the output. If no argument is provided, The Docker Workshop will be used as the 
standard value

----------------------------------------------------------------------------------------------------------------------------------
1. Create a new directory named custom-docker-image using the mkdir
command. This directory will be the context for your Docker image. Context
is the directory that contains all the files needed to successfully build an image:
$ mkdir custom-docker-image
----------------------------------------------------------------------------------------------------------------------------------

2. Navigate to the newly created custom-docker-image directory using the cd
command as we will be creating all the files required during the build process 
(including the Dockerfile) within this directory:
$ cd custom-docker-image
----------------------------------------------------------------------------------------------------------------------------------

3. Within the custom-docker-image directory, create a file named 
Dockerfile using the touch command:
$ touch Dockerfile
----------------------------------------------------------------------------------------------------------------------------------

4. Now, open the Dockerfile using your favorite text editor:
$ vim Dockerfile
----------------------------------------------------------------------------------------------------------------------------------

5. Add the following content to the Dockerfile, save it, and exit from 
the Dockerfile:
# This is my first Docker image
FROM ubuntu:latest
LABEL maintainer=sathsara@mydomain.com
CMD ["echo","Hello World"]

This Dockerfile uses the latest ubuntu images as the parent image. Then, the 
LABEL directive is used to specify sathsara@mydomain.com as the maintainer. 
Finally, the CMD directive is used to echo "Hello World" as the output of 
the image.
----------------------------------------------------------------------------------------------------------------------------------

6.
We can execute the docker image build command from the folder that contains the 
Dockerfile and the other files, as shown in the following example. Note that the 
dot (.) at the end of the command is used to denote the current directory:

$ docker image build .
----------------------------------------------------------------------------------------------------------------------------------
6. 
Once we execute the docker image build command for the preceding Dockerfile, 
we can see an output similar to the following on the console during the build process:
Sending build context to Docker daemon 2.048kB
Step 1/3 : FROM ubuntu:latest
latest: Pulling from library/ubuntu
2746a4a261c9: Pull complete 
4c1d20cdee96: Pull complete 
0d3160e1d0de: Pull complete 
c8e37668deea: Pull complete
Digest: sha256:250cc6f3f3ffc5cdaa9d8f4946ac79821aafb4d3afc93928
 f0de9336eba21aa4
Status: Downloaded newer image for ubuntu:latest
---> 549b9b86cb8d
Step 2/3 : LABEL maintainer=sathsara@mydomain.com
---> Running in a4a11e5e7c27
Removing intermediate container a4a11e5e7c27
---> e3add5272e35
Step 3/3 : CMD ["echo","Hello World"]
---> Running in aad8a56fcdc5
Removing intermediate container aad8a56fcdc5
---> dc3d4fd77861
Successfully built dc3d4fd77861 
----------------------------------------------------------------------------------------------------------------------------------

7.
Now, we can list the available Docker images using the docker image 
list command:

$ docker image list

This list contains the locally built Docker images and Docker images pulled from 
remote Docker repositories:

REPOSITORY TAG IMAGE ID CREATED SIZE
<none> <none> dc3d4fd77861 3 minutes ago 64.2MB
ubuntu latest 549b9b86cb8d 5 days ago 64.2MB


As shown in the preceding output, we can see two Docker images. The first Docker 
image with the IMAGE ID of dc3d4fd77861 is the locally built Docker image during 
the build process. We can see that this IMAGE ID is identical to the ID in the last line 
of the docker image build command. The next image is the ubuntu image that 
we used as the parent image of our custom image.
----------------------------------------------------------------------------------------------------------------------------------

8.
Now, let's build the Docker image again using the docker image 
build command:

$ docker image build .

Sending build context to Docker daemon 2.048kB
Step 1/3 : FROM ubuntu:latest
---> 549b9b86cb8d
Step 2/3 : LABEL maintainer=sathsara@mydomain.com
---> Using cache
---> e3add5272e35
Step 3/3 : CMD ["echo","Hello World"]
---> Using cache
---> dc3d4fd77861
Successfully built dc3d4fd77861

This time, the image build process was instantaneous. The reason for this is the 
cache. Since we did not change any content of the Dockerfile, the Docker daemon 
took advantage of the cache and reused the existing layers from the local image 
cache to accelerate the build process. We can see that the cache was used this time 
with the Using cache lines available in the preceding output.
----------------------------------------------------------------------------------------------------------------------------------

9)
Now, let's revisit the locally available Docker images with the docker image 
list command:
$ docker image list

The command should return the following output:

REPOSITORY TAG    IMAGE ID     CREATED       SIZE
<none>     <none> dc3d4fd77861 3 minutes ago 64.2MB
ubuntu     latest 549b9b86cb8d 5 days ago    64.2MB

Note that there was no name for our custom Docker image. This was because we 
did not specify any repository or tag during the build process. We can tag an existing 
image with the docker image tag command. 
----------------------------------------------------------------------------------------------------------------------------------

10)
Let's tag our image with IMAGE ID dc3d4fd77861 as my-tagged-image:v1.0:

$ docker image tag dc3d4fd77861 my-tagged-image:v1.0

Now, if we list our images again, we can see the Docker image name and the tag 
under the REPOSITORY and TAG columns:

$ docker image list

REPOSITORY      TAG    IMAGE ID     CREATED        SIZE
my-tagged-image v1.0   dc3d4fd77861 20 minutes ago 64.2MB
ubuntu          latest 549b9b86cb8d 5 days ago     64.2MB

----------------------------------------------------------------------------------------------------------------------------------
11)
We can also tag an image during the build process by specifying the -t flag:
$ docker image build -t my-tagged-image:v2.0 .

The preceding command will print the following output:
Sending build context to Docker daemon 2.048kB
Step 1/3 : FROM ubuntu:latest
---> 549b9b86cb8d
Step 2/3 : LABEL maintainer=sathsara@mydomain.com
---> Using cache
---> e3add5272e35
Step 3/3 : CMD ["echo","Hello World"]
---> Using cache
---> dc3d4fd77861
Successfully built dc3d4fd77861
Successfully tagged my-tagged-image:v2.0
























